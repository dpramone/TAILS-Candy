#! /bin/sh
### BEGIN INIT INFO
# Provides:          tails_candy
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Tails Candy shutdown hook
# Description:       TAILS Candy rc script to be executed in rc6.d only
### END INIT INFO

# Author: Dirk Praet <skylord@jedi.be>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Shutdown hook"
NAME="TAILS Candy"
DAEMON=/usr/sbin/TAILS_Candy
DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
# [ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	# Execute TAILS Candy shutdown stuff

	# Save SilentEye configuration file
	silentfile="/opt/silenteye/silenteye.conf"
	if [ -f "$conffile" ]; then
		cp -p $silentfile /home/amnesia/Persistent/Packages/Settings/SilentEye/
		chown amnesia:amnesia /home/amnesia/Persistent/Packages/Settings/SilentEye/silenteye.conf
	fi

	# Save Dropbox stuff
	distfile="/home/amnesia/.dropbox-dist/dropboxd"
	dropfile="/home/amnesia/.dropbox/host.db"
	if [ -f "$distfile" ]; then
	# If file is not a symlink, then copy newer version in ~ to persistence
		rm -rf /live/persistence/TailsData_unlocked/dotfiles/.dropbox-dist
		mv /home/amnesia/.dropbox-dist /live/persistence/TailsData_unlocked/dotfiles/
		chown -R amnesia:amnesia /live/persistence/TailsData_unlocked/dotfiles/dropbox-dist
	fi
	 
	if [ -f "$dropfile" ]; then
	# If file is not a symlink, then copy newer version in ~ to persistence
		rm -rf /live/persistence/TailsData_unlocked/dotfiles/.dropbox
		mv /home/amnesia/.dropbox /live/persistence/TailsData_unlocked/dotfiles/
		chown -R amnesia:amnesia /live/persistence/TailsData_unlocked/dotfiles/dropbox
	fi

	return 0
}

#
# Function that normally sends a SIGHUP to the daemon/service
# This is just a dummy
#
do_reload() {
	#
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Nothing to start for $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Executing $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Ignoring restart for $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
